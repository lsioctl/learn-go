// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "github.com/lsioctl/rest-layered-poc/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateAlbum provides a mock function with given fields: album
func (_m *Service) CreateAlbum(album dto.Album) {
	_m.Called(album)
}

// Service_CreateAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlbum'
type Service_CreateAlbum_Call struct {
	*mock.Call
}

// CreateAlbum is a helper method to define mock.On call
//   - album dto.Album
func (_e *Service_Expecter) CreateAlbum(album interface{}) *Service_CreateAlbum_Call {
	return &Service_CreateAlbum_Call{Call: _e.mock.On("CreateAlbum", album)}
}

func (_c *Service_CreateAlbum_Call) Run(run func(album dto.Album)) *Service_CreateAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Album))
	})
	return _c
}

func (_c *Service_CreateAlbum_Call) Return() *Service_CreateAlbum_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_CreateAlbum_Call) RunAndReturn(run func(dto.Album)) *Service_CreateAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlbumByID provides a mock function with given fields: id
func (_m *Service) GetAlbumByID(id string) (dto.Album, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumByID")
	}

	var r0 dto.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Album, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Album); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.Album)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAlbumByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbumByID'
type Service_GetAlbumByID_Call struct {
	*mock.Call
}

// GetAlbumByID is a helper method to define mock.On call
//   - id string
func (_e *Service_Expecter) GetAlbumByID(id interface{}) *Service_GetAlbumByID_Call {
	return &Service_GetAlbumByID_Call{Call: _e.mock.On("GetAlbumByID", id)}
}

func (_c *Service_GetAlbumByID_Call) Run(run func(id string)) *Service_GetAlbumByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Service_GetAlbumByID_Call) Return(_a0 dto.Album, _a1 error) *Service_GetAlbumByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAlbumByID_Call) RunAndReturn(run func(string) (dto.Album, error)) *Service_GetAlbumByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlbumList provides a mock function with given fields:
func (_m *Service) GetAlbumList() []dto.Album {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumList")
	}

	var r0 []dto.Album
	if rf, ok := ret.Get(0).(func() []dto.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Album)
		}
	}

	return r0
}

// Service_GetAlbumList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbumList'
type Service_GetAlbumList_Call struct {
	*mock.Call
}

// GetAlbumList is a helper method to define mock.On call
func (_e *Service_Expecter) GetAlbumList() *Service_GetAlbumList_Call {
	return &Service_GetAlbumList_Call{Call: _e.mock.On("GetAlbumList")}
}

func (_c *Service_GetAlbumList_Call) Run(run func()) *Service_GetAlbumList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_GetAlbumList_Call) Return(_a0 []dto.Album) *Service_GetAlbumList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetAlbumList_Call) RunAndReturn(run func() []dto.Album) *Service_GetAlbumList_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
